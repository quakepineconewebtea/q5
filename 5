def func1(arg1, arg2):
    var3 = func4()
    var8 = func5(var3, arg1)
    if var8 < var8:
        var13 = class6()
    else:
        var13 = class8()
    for var14 in range(14):
        var13.func7(var8, var3)
    var19 = func10(var3, arg1)
    var24 = func11(var8, var3)
    var25 = arg2 ^ var3 + var19
    var26 = arg1 + var24 ^ var19
    var27 = (387291728 - var25) & var26 ^ var24
    var28 = (var27 ^ var24 | var24) + 476
    var29 = var19 - var27 - var26 - 798838898
    var30 = arg1 - var3 | var26
    var31 = var28 + arg2
    var32 = arg2 | -1253070618 - var24 - var24
    if var32 < arg2:
        var33 = arg1 + arg2 + var32
    else:
        var33 = var32 ^ ((var29 & var32) + 276544238)
    var34 = var26 & var26
    var35 = (var29 ^ var29 ^ var19) ^ var32
    var36 = 1483913334 & 519508156
    var37 = var26 | arg2 & var27 | var31
    var38 = var26 - ((var34 | var19) ^ var29)
    result = var19 ^ -449357353 ^ arg1 ^ var24
    return result
def func11(arg20, arg21):
    var22 = 0
    for var23 in range(35):
        var22 += var23 ^ (arg20 | var22)
    return var22
def func10(arg15, arg16):
    var17 = 0
    for var18 in xrange(29):
        if arg15 < arg15:
            var17 += arg16 | var17
        else:
            var17 += (-5 - var17) - var18
    return var17
class class8(object):
    def func7(self, arg11, arg12):
        result = (-1 - 0 + 1887248225) + (-398196407 | 1565326823 & 1606837625) & -311008612
        return result
class class6(object):
    def func7(self, arg9, arg10):
        result = arg9 - 0 & arg9 | arg10
        return result
def func5(arg4, arg5):
    var6 = 0
    for var7 in range(50):
        if var7 < var6:
            var6 += (arg4 ^ arg5) ^ var6
        else:
            var6 += var7 & var6 - arg5
    return var6
def func4():
    func2()
    result = len(range(16))
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : 9
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 39'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var8 = func5(var3, arg1)
    if var8 < var8:
        var13 = class6()
    else:
        var13 = class8()
    for var14 in range(14):
        var13.func7(var8, var3)
    var19 = func10(var3, arg1)
    var24 = func11(var8, var3)
    var25 = arg2 ^ var3 + var19
    var26 = arg1 + var24 ^ var19
    var27 = (387291728 - var25) & var26 ^ var24
    var28 = (var27 ^ var24 | var24) + 476
    var29 = var19 - var27 - var26 - 798838898
    var30 = arg1 - var3 | var26
    var31 = var28 + arg2
    var32 = arg2 | -1253070618 - var24 - var24
    if var32 < arg2:
        var33 = arg1 + arg2 + var32
    else:
        var33 = var32 ^ ((var29 & var32) + 276544238)
    var34 = var26 & var26
    var35 = (var29 ^ var29 ^ var19) ^ var32
    var36 = 1483913334 & 519508156
    var37 = var26 | arg2 & var27 | var31
    var38 = var26 - ((var34 | var19) ^ var29)
    result = var19 ^ -449357353 ^ arg1 ^ var24
    return result
def func11(arg20, arg21):
    var22 = 0
    for var23 in range(35):
        var22 += var23 ^ (arg20 | var22)
    return var22
def func10(arg15, arg16):
    var17 = 0
    for var18 in xrange(29):
        if arg15 < arg15:
            var17 += arg16 | var17
        else:
            var17 += (-5 - var17) - var18
    return var17
class class8(object):
    def func7(self, arg11, arg12):
        result = (-1 - 0 + 1887248225) + (-398196407 | 1565326823 & 1606837625) & -311008612
        return result
class class6(object):
    def func7(self, arg9, arg10):
        result = arg9 - 0 & arg9 | arg10
        return result
def func5(arg4, arg5):
    var6 = 0
    for var7 in range(50):
        if var7 < var6:
            var6 += (arg4 ^ arg5) ^ var6
        else:
            var6 += var7 & var6 - arg5
    return var6
def func4():
    func2()
    result = len(range(16))
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : 9
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 39'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var8 = func5(var3, arg1)
    if var8 < var8:
        var13 = class6()
    else:
        var13 = class8()
    for var14 in range(14):
        var13.func7(var8, var3)
    var19 = func10(var3, arg1)
    var24 = func11(var8, var3)
    var25 = arg2 ^ var3 + var19
    var26 = arg1 + var24 ^ var19
    var27 = (387291728 - var25) & var26 ^ var24
    var28 = (var27 ^ var24 | var24) + 476
    var29 = var19 - var27 - var26 - 798838898
    var30 = arg1 - var3 | var26
    var31 = var28 + arg2
    var32 = arg2 | -1253070618 - var24 - var24
    if var32 < arg2:
        var33 = arg1 + arg2 + var32
    else:
        var33 = var32 ^ ((var29 & var32) + 276544238)
    var34 = var26 & var26
    var35 = (var29 ^ var29 ^ var19) ^ var32
    var36 = 1483913334 & 519508156
    var37 = var26 | arg2 & var27 | var31
    var38 = var26 - ((var34 | var19) ^ var29)
    result = var19 ^ -449357353 ^ arg1 ^ var24
    return result
def func11(arg20, arg21):
    var22 = 0
    for var23 in range(35):
        var22 += var23 ^ (arg20 | var22)
    return var22
def func10(arg15, arg16):
    var17 = 0
    for var18 in xrange(29):
        if arg15 < arg15:
            var17 += arg16 | var17
        else:
            var17 += (-5 - var17) - var18
    return var17
class class8(object):
    def func7(self, arg11, arg12):
        result = (-1 - 0 + 1887248225) + (-398196407 | 1565326823 & 1606837625) & -311008612
        return result
class class6(object):
    def func7(self, arg9, arg10):
        result = arg9 - 0 & arg9 | arg10
        return result
def func5(arg4, arg5):
    var6 = 0
    for var7 in range(50):
        if var7 < var6:
            var6 += (arg4 ^ arg5) ^ var6
        else:
            var6 += var7 & var6 - arg5
    return var6
def func4():
    func2()
    result = len(range(16))
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : 9
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 39'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var8 = func5(var3, arg1)
    if var8 < var8:
        var13 = class6()
    else:
        var13 = class8()
    for var14 in range(14):
        var13.func7(var8, var3)
    var19 = func10(var3, arg1)
    var24 = func11(var8, var3)
    var25 = arg2 ^ var3 + var19
    var26 = arg1 + var24 ^ var19
    var27 = (387291728 - var25) & var26 ^ var24
    var28 = (var27 ^ var24 | var24) + 476
    var29 = var19 - var27 - var26 - 798838898
    var30 = arg1 - var3 | var26
    var31 = var28 + arg2
    var32 = arg2 | -1253070618 - var24 - var24
    if var32 < arg2:
        var33 = arg1 + arg2 + var32
    else:
        var33 = var32 ^ ((var29 & var32) + 276544238)
    var34 = var26 & var26
    var35 = (var29 ^ var29 ^ var19) ^ var32
    var36 = 1483913334 & 519508156
    var37 = var26 | arg2 & var27 | var31
    var38 = var26 - ((var34 | var19) ^ var29)
    result = var19 ^ -449357353 ^ arg1 ^ var24
    return result
def func11(arg20, arg21):
    var22 = 0
    for var23 in range(35):
        var22 += var23 ^ (arg20 | var22)
    return var22
def func10(arg15, arg16):
    var17 = 0
    for var18 in xrange(29):
        if arg15 < arg15:
            var17 += arg16 | var17
        else:
            var17 += (-5 - var17) - var18
    return var17
class class8(object):
    def func7(self, arg11, arg12):
        result = (-1 - 0 + 1887248225) + (-398196407 | 1565326823 & 1606837625) & -311008612
        return result
class class6(object):
    def func7(self, arg9, arg10):
        result = arg9 - 0 & arg9 | arg10
        return result
def func5(arg4, arg5):
    var6 = 0
    for var7 in range(50):
        if var7 < var6:
            var6 += (arg4 ^ arg5) ^ var6
        else:
            var6 += var7 & var6 - arg5
    return var6
def func4():
    func2()
    result = len(range(16))
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : 9
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 39'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var8 = func5(var3, arg1)
    if var8 < var8:
        var13 = class6()
    else:
        var13 = class8()
    for var14 in range(14):
        var13.func7(var8, var3)
    var19 = func10(var3, arg1)
    var24 = func11(var8, var3)
    var25 = arg2 ^ var3 + var19
    var26 = arg1 + var24 ^ var19
    var27 = (387291728 - var25) & var26 ^ var24
    var28 = (var27 ^ var24 | var24) + 476
    var29 = var19 - var27 - var26 - 798838898
    var30 = arg1 - var3 | var26
    var31 = var28 + arg2
    var32 = arg2 | -1253070618 - var24 - var24
    if var32 < arg2:
        var33 = arg1 + arg2 + var32
    else:
        var33 = var32 ^ ((var29 & var32) + 276544238)
    var34 = var26 & var26
    var35 = (var29 ^ var29 ^ var19) ^ var32
    var36 = 1483913334 & 519508156
    var37 = var26 | arg2 & var27 | var31
    var38 = var26 - ((var34 | var19) ^ var29)
    result = var19 ^ -449357353 ^ arg1 ^ var24
    return result
def func11(arg20, arg21):
    var22 = 0
    for var23 in range(35):
        var22 += var23 ^ (arg20 | var22)
    return var22
def func10(arg15, arg16):
    var17 = 0
    for var18 in xrange(29):
        if arg15 < arg15:
            var17 += arg16 | var17
        else:
            var17 += (-5 - var17) - var18
    return var17
class class8(object):
    def func7(self, arg11, arg12):
        result = (-1 - 0 + 1887248225) + (-398196407 | 1565326823 & 1606837625) & -311008612
        return result
class class6(object):
    def func7(self, arg9, arg10):
        result = arg9 - 0 & arg9 | arg10
        return result
def func5(arg4, arg5):
    var6 = 0
    for var7 in range(50):
        if var7 < var6:
            var6 += (arg4 ^ arg5) ^ var6
        else:
            var6 += var7 & var6 - arg5
    return var6
def func4():
    func2()
    result = len(range(16))
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : 9
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 39'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var8 = func5(var3, arg1)
    if var8 < var8:
        var13 = class6()
    else:
        var13 = class8()
    for var14 in range(14):
        var13.func7(var8, var3)
    var19 = func10(var3, arg1)
    var24 = func11(var8, var3)
    var25 = arg2 ^ var3 + var19
    var26 = arg1 + var24 ^ var19
    var27 = (387291728 - var25) & var26 ^ var24
    var28 = (var27 ^ var24 | var24) + 476
    var29 = var19 - var27 - var26 - 798838898
    var30 = arg1 - var3 | var26
    var31 = var28 + arg2
    var32 = arg2 | -1253070618 - var24 - var24
    if var32 < arg2:
        var33 = arg1 + arg2 + var32
    else:
        var33 = var32 ^ ((var29 & var32) + 276544238)
    var34 = var26 & var26
    var35 = (var29 ^ var29 ^ var19) ^ var32
    var36 = 1483913334 & 519508156
    var37 = var26 | arg2 & var27 | var31
    var38 = var26 - ((var34 | var19) ^ var29)
    result = var19 ^ -449357353 ^ arg1 ^ var24
    return result
def func11(arg20, arg21):
    var22 = 0
    for var23 in range(35):
        var22 += var23 ^ (arg20 | var22)
    return var22
def func10(arg15, arg16):
    var17 = 0
    for var18 in xrange(29):
        if arg15 < arg15:
            var17 += arg16 | var17
        else:
            var17 += (-5 - var17) - var18
    return var17
class class8(object):
    def func7(self, arg11, arg12):
        result = (-1 - 0 + 1887248225) + (-398196407 | 1565326823 & 1606837625) & -311008612
        return result
class class6(object):
    def func7(self, arg9, arg10):
        result = arg9 - 0 & arg9 | arg10
        return result
def func5(arg4, arg5):
    var6 = 0
    for var7 in range(50):
        if var7 < var6:
            var6 += (arg4 ^ arg5) ^ var6
        else:
            var6 += var7 & var6 - arg5
    return var6
def func4():
    func2()
    result = len(range(16))
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : 9
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 39'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var8 = func5(var3, arg1)
    if var8 < var8:
        var13 = class6()
    else:
        var13 = class8()
    for var14 in range(14):
        var13.func7(var8, var3)
    var19 = func10(var3, arg1)
    var24 = func11(var8, var3)
    var25 = arg2 ^ var3 + var19
    var26 = arg1 + var24 ^ var19
    var27 = (387291728 - var25) & var26 ^ var24
    var28 = (var27 ^ var24 | var24) + 476
    var29 = var19 - var27 - var26 - 798838898
    var30 = arg1 - var3 | var26
    var31 = var28 + arg2
    var32 = arg2 | -1253070618 - var24 - var24
    if var32 < arg2:
        var33 = arg1 + arg2 + var32
    else:
        var33 = var32 ^ ((var29 & var32) + 276544238)
    var34 = var26 & var26
    var35 = (var29 ^ var29 ^ var19) ^ var32
    var36 = 1483913334 & 519508156
    var37 = var26 | arg2 & var27 | var31
    var38 = var26 - ((var34 | var19) ^ var29)
    result = var19 ^ -449357353 ^ arg1 ^ var24
    return result
def func11(arg20, arg21):
    var22 = 0
    for var23 in range(35):
        var22 += var23 ^ (arg20 | var22)
    return var22
def func10(arg15, arg16):
    var17 = 0
    for var18 in xrange(29):
        if arg15 < arg15:
            var17 += arg16 | var17
        else:
            var17 += (-5 - var17) - var18
    return var17
class class8(object):
    def func7(self, arg11, arg12):
        result = (-1 - 0 + 1887248225) + (-398196407 | 1565326823 & 1606837625) & -311008612
        return result
class class6(object):
    def func7(self, arg9, arg10):
        result = arg9 - 0 & arg9 | arg10
        return result
def func5(arg4, arg5):
    var6 = 0
    for var7 in range(50):
        if var7 < var6:
            var6 += (arg4 ^ arg5) ^ var6
        else:
            var6 += var7 & var6 - arg5
    return var6
def func4():
    func2()
    result = len(range(16))
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : 9
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 39'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var8 = func5(var3, arg1)
    if var8 < var8:
        var13 = class6()
    else:
        var13 = class8()
    for var14 in range(14):
        var13.func7(var8, var3)
    var19 = func10(var3, arg1)
    var24 = func11(var8, var3)
    var25 = arg2 ^ var3 + var19
    var26 = arg1 + var24 ^ var19
    var27 = (387291728 - var25) & var26 ^ var24
    var28 = (var27 ^ var24 | var24) + 476
    var29 = var19 - var27 - var26 - 798838898
    var30 = arg1 - var3 | var26
    var31 = var28 + arg2
    var32 = arg2 | -1253070618 - var24 - var24
    if var32 < arg2:
        var33 = arg1 + arg2 + var32
    else:
        var33 = var32 ^ ((var29 & var32) + 276544238)
    var34 = var26 & var26
    var35 = (var29 ^ var29 ^ var19) ^ var32
    var36 = 1483913334 & 519508156
    var37 = var26 | arg2 & var27 | var31
    var38 = var26 - ((var34 | var19) ^ var29)
    result = var19 ^ -449357353 ^ arg1 ^ var24
    return result
def func11(arg20, arg21):
    var22 = 0
    for var23 in range(35):
        var22 += var23 ^ (arg20 | var22)
    return var22
def func10(arg15, arg16):
    var17 = 0
    for var18 in xrange(29):
        if arg15 < arg15:
            var17 += arg16 | var17
        else:
            var17 += (-5 - var17) - var18
    return var17
class class8(object):
    def func7(self, arg11, arg12):
        result = (-1 - 0 + 1887248225) + (-398196407 | 1565326823 & 1606837625) & -311008612
        return result
class class6(object):
    def func7(self, arg9, arg10):
        result = arg9 - 0 & arg9 | arg10
        return result
def func5(arg4, arg5):
    var6 = 0
    for var7 in range(50):
        if var7 < var6:
            var6 += (arg4 ^ arg5) ^ var6
        else:
            var6 += var7 & var6 - arg5
    return var6
def func4():
    func2()
    result = len(range(16))
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : 9
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 39'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var8 = func5(var3, arg1)
    if var8 < var8:
        var13 = class6()
    else:
        var13 = class8()
    for var14 in range(14):
        var13.func7(var8, var3)
    var19 = func10(var3, arg1)
    var24 = func11(var8, var3)
    var25 = arg2 ^ var3 + var19
    var26 = arg1 + var24 ^ var19
    var27 = (387291728 - var25) & var26 ^ var24
    var28 = (var27 ^ var24 | var24) + 476
    var29 = var19 - var27 - var26 - 798838898
    var30 = arg1 - var3 | var26
    var31 = var28 + arg2
    var32 = arg2 | -1253070618 - var24 - var24
    if var32 < arg2:
        var33 = arg1 + arg2 + var32
    else:
        var33 = var32 ^ ((var29 & var32) + 276544238)
    var34 = var26 & var26
    var35 = (var29 ^ var29 ^ var19) ^ var32
    var36 = 1483913334 & 519508156
    var37 = var26 | arg2 & var27 | var31
    var38 = var26 - ((var34 | var19) ^ var29)
    result = var19 ^ -449357353 ^ arg1 ^ var24
    return result
def func11(arg20, arg21):
    var22 = 0
    for var23 in range(35):
        var22 += var23 ^ (arg20 | var22)
    return var22
def func10(arg15, arg16):
    var17 = 0
    for var18 in xrange(29):
        if arg15 < arg15:
            var17 += arg16 | var17
        else:
            var17 += (-5 - var17) - var18
    return var17
class class8(object):
    def func7(self, arg11, arg12):
        result = (-1 - 0 + 1887248225) + (-398196407 | 1565326823 & 1606837625) & -311008612
        return result
class class6(object):
    def func7(self, arg9, arg10):
        result = arg9 - 0 & arg9 | arg10
        return result
def func5(arg4, arg5):
    var6 = 0
    for var7 in range(50):
        if var7 < var6:
            var6 += (arg4 ^ arg5) ^ var6
        else:
            var6 += var7 & var6 - arg5
    return var6
def func4():
    func2()
    result = len(range(16))
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : 9
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 39'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var8 = func5(var3, arg1)
    if var8 < var8:
        var13 = class6()
    else:
        var13 = class8()
    for var14 in range(14):
        var13.func7(var8, var3)
    var19 = func10(var3, arg1)
    var24 = func11(var8, var3)
    var25 = arg2 ^ var3 + var19
    var26 = arg1 + var24 ^ var19
    var27 = (387291728 - var25) & var26 ^ var24
    var28 = (var27 ^ var24 | var24) + 476
    var29 = var19 - var27 - var26 - 798838898
    var30 = arg1 - var3 | var26
    var31 = var28 + arg2
    var32 = arg2 | -1253070618 - var24 - var24
    if var32 < arg2:
        var33 = arg1 + arg2 + var32
    else:
        var33 = var32 ^ ((var29 & var32) + 276544238)
    var34 = var26 & var26
    var35 = (var29 ^ var29 ^ var19) ^ var32
    var36 = 1483913334 & 519508156
    var37 = var26 | arg2 & var27 | var31
    var38 = var26 - ((var34 | var19) ^ var29)
    result = var19 ^ -449357353 ^ arg1 ^ var24
    return result
def func11(arg20, arg21):
    var22 = 0
    for var23 in range(35):
        var22 += var23 ^ (arg20 | var22)
    return var22
def func10(arg15, arg16):
    var17 = 0
    for var18 in xrange(29):
        if arg15 < arg15:
            var17 += arg16 | var17
        else:
            var17 += (-5 - var17) - var18
    return var17
class class8(object):
    def func7(self, arg11, arg12):
        result = (-1 - 0 + 1887248225) + (-398196407 | 1565326823 & 1606837625) & -311008612
        return result
class class6(object):
    def func7(self, arg9, arg10):
        result = arg9 - 0 & arg9 | arg10
        return result
def func5(arg4, arg5):
    var6 = 0
    for var7 in range(50):
        if var7 < var6:
            var6 += (arg4 ^ arg5) ^ var6
        else:
            var6 += var7 & var6 - arg5
    return var6
def func4():
    func2()
    result = len(range(16))
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : 9
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 39'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var8 = func5(var3, arg1)
    if var8 < var8:
        var13 = class6()
    else:
        var13 = class8()
    for var14 in range(14):
        var13.func7(var8, var3)
    var19 = func10(var3, arg1)
    var24 = func11(var8, var3)
    var25 = arg2 ^ var3 + var19
    var26 = arg1 + var24 ^ var19
    var27 = (387291728 - var25) & var26 ^ var24
    var28 = (var27 ^ var24 | var24) + 476
    var29 = var19 - var27 - var26 - 798838898
    var30 = arg1 - var3 | var26
    var31 = var28 + arg2
    var32 = arg2 | -1253070618 - var24 - var24
    if var32 < arg2:
        var33 = arg1 + arg2 + var32
    else:
        var33 = var32 ^ ((var29 & var32) + 276544238)
    var34 = var26 & var26
    var35 = (var29 ^ var29 ^ var19) ^ var32
    var36 = 1483913334 & 519508156
    var37 = var26 | arg2 & var27 | var31
    var38 = var26 - ((var34 | var19) ^ var29)
    result = var19 ^ -449357353 ^ arg1 ^ var24
    return result
def func11(arg20, arg21):
    var22 = 0
    for var23 in range(35):
        var22 += var23 ^ (arg20 | var22)
    return var22
def func10(arg15, arg16):
    var17 = 0
    for var18 in xrange(29):
        if arg15 < arg15:
            var17 += arg16 | var17
        else:
            var17 += (-5 - var17) - var18
    return var17
class class8(object):
    def func7(self, arg11, arg12):
        result = (-1 - 0 + 1887248225) + (-398196407 | 1565326823 & 1606837625) & -311008612
        return result
class class6(object):
    def func7(self, arg9, arg10):
        result = arg9 - 0 & arg9 | arg10
        return result
def func5(arg4, arg5):
    var6 = 0
    for var7 in range(50):
        if var7 < var6:
            var6 += (arg4 ^ arg5) ^ var6
        else:
            var6 += var7 & var6 - arg5
    return var6
def func4():
    func2()
    result = len(range(16))
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : 9
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 39'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var8 = func5(var3, arg1)
    if var8 < var8:
        var13 = class6()
    else:
        var13 = class8()
    for var14 in range(14):
        var13.func7(var8, var3)
    var19 = func10(var3, arg1)
    var24 = func11(var8, var3)
    var25 = arg2 ^ var3 + var19
    var26 = arg1 + var24 ^ var19
    var27 = (387291728 - var25) & var26 ^ var24
    var28 = (var27 ^ var24 | var24) + 476
    var29 = var19 - var27 - var26 - 798838898
    var30 = arg1 - var3 | var26
    var31 = var28 + arg2
    var32 = arg2 | -1253070618 - var24 - var24
    if var32 < arg2:
        var33 = arg1 + arg2 + var32
    else:
        var33 = var32 ^ ((var29 & var32) + 276544238)
    var34 = var26 & var26
    var35 = (var29 ^ var29 ^ var19) ^ var32
    var36 = 1483913334 & 519508156
    var37 = var26 | arg2 & var27 | var31
    var38 = var26 - ((var34 | var19) ^ var29)
    result = var19 ^ -449357353 ^ arg1 ^ var24
    return result
def func11(arg20, arg21):
    var22 = 0
    for var23 in range(35):
        var22 += var23 ^ (arg20 | var22)
    return var22
def func10(arg15, arg16):
    var17 = 0
    for var18 in xrange(29):
        if arg15 < arg15:
            var17 += arg16 | var17
        else:
            var17 += (-5 - var17) - var18
    return var17
class class8(object):
    def func7(self, arg11, arg12):
        result = (-1 - 0 + 1887248225) + (-398196407 | 1565326823 & 1606837625) & -311008612
        return result
class class6(object):
    def func7(self, arg9, arg10):
        result = arg9 - 0 & arg9 | arg10
        return result
def func5(arg4, arg5):
    var6 = 0
    for var7 in range(50):
        if var7 < var6:
            var6 += (arg4 ^ arg5) ^ var6
        else:
            var6 += var7 & var6 - arg5
    return var6
def func4():
    func2()
    result = len(range(16))
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : 9
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 39'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var8 = func5(var3, arg1)
    if var8 < var8:
        var13 = class6()
    else:
        var13 = class8()
    for var14 in range(14):
        var13.func7(var8, var3)
    var19 = func10(var3, arg1)
    var24 = func11(var8, var3)
    var25 = arg2 ^ var3 + var19
    var26 = arg1 + var24 ^ var19
    var27 = (387291728 - var25) & var26 ^ var24
    var28 = (var27 ^ var24 | var24) + 476
    var29 = var19 - var27 - var26 - 798838898
    var30 = arg1 - var3 | var26
    var31 = var28 + arg2
    var32 = arg2 | -1253070618 - var24 - var24
    if var32 < arg2:
        var33 = arg1 + arg2 + var32
    else:
        var33 = var32 ^ ((var29 & var32) + 276544238)
    var34 = var26 & var26
    var35 = (var29 ^ var29 ^ var19) ^ var32
    var36 = 1483913334 & 519508156
    var37 = var26 | arg2 & var27 | var31
    var38 = var26 - ((var34 | var19) ^ var29)
    result = var19 ^ -449357353 ^ arg1 ^ var24
    return result
def func11(arg20, arg21):
    var22 = 0
    for var23 in range(35):
        var22 += var23 ^ (arg20 | var22)
    return var22
def func10(arg15, arg16):
    var17 = 0
    for var18 in xrange(29):
        if arg15 < arg15:
            var17 += arg16 | var17
        else:
            var17 += (-5 - var17) - var18
    return var17
class class8(object):
    def func7(self, arg11, arg12):
        result = (-1 - 0 + 1887248225) + (-398196407 | 1565326823 & 1606837625) & -311008612
        return result
class class6(object):
    def func7(self, arg9, arg10):
        result = arg9 - 0 & arg9 | arg10
        return result
def func5(arg4, arg5):
    var6 = 0
    for var7 in range(50):
        if var7 < var6:
            var6 += (arg4 ^ arg5) ^ var6
        else:
            var6 += var7 & var6 - arg5
    return var6
def func4():
    func2()
    result = len(range(16))
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : 9
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 39'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var8 = func5(var3, arg1)
    if var8 < var8:
        var13 = class6()
    else:
        var13 = class8()
    for var14 in range(14):
        var13.func7(var8, var3)
    var19 = func10(var3, arg1)
    var24 = func11(var8, var3)
    var25 = arg2 ^ var3 + var19
    var26 = arg1 + var24 ^ var19
    var27 = (387291728 - var25) & var26 ^ var24
    var28 = (var27 ^ var24 | var24) + 476
    var29 = var19 - var27 - var26 - 798838898
    var30 = arg1 - var3 | var26
    var31 = var28 + arg2
    var32 = arg2 | -1253070618 - var24 - var24
    if var32 < arg2:
        var33 = arg1 + arg2 + var32
    else:
        var33 = var32 ^ ((var29 & var32) + 276544238)
    var34 = var26 & var26
    var35 = (var29 ^ var29 ^ var19) ^ var32
    var36 = 1483913334 & 519508156
    var37 = var26 | arg2 & var27 | var31
    var38 = var26 - ((var34 | var19) ^ var29)
    result = var19 ^ -449357353 ^ arg1 ^ var24
    return result
def func11(arg20, arg21):
    var22 = 0
    for var23 in range(35):
        var22 += var23 ^ (arg20 | var22)
    return var22
def func10(arg15, arg16):
    var17 = 0
    for var18 in xrange(29):
        if arg15 < arg15:
            var17 += arg16 | var17
        else:
            var17 += (-5 - var17) - var18
    return var17
class class8(object):
    def func7(self, arg11, arg12):
        result = (-1 - 0 + 1887248225) + (-398196407 | 1565326823 & 1606837625) & -311008612
        return result
class class6(object):
    def func7(self, arg9, arg10):
        result = arg9 - 0 & arg9 | arg10
        return result
def func5(arg4, arg5):
    var6 = 0
    for var7 in range(50):
        if var7 < var6:
            var6 += (arg4 ^ arg5) ^ var6
        else:
            var6 += var7 & var6 - arg5
    return var6
def func4():
    func2()
    result = len(range(16))
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : 9
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 12'
    print 'arg_number: 39'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
